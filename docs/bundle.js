!function(n,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.theHourglass=r():n.theHourglass=r()}(self,(()=>(()=>{"use strict";var n={931:(n,r,t)=>{t.d(r,{Z:()=>A});var e=t(537),o=t.n(e),a=t(645),s=t.n(a)()(o());s.push([n.id,"/* TEMP */\nbody {\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hourglass__container {\n  height: 30rem;\n  width: 30rem;\n  /* border: 1px solid black; */\n  postition: relative;\n}\n\n/* #hourglass {\n  transform: rotate(10deg);\n} */\n\n.hourglass__rim {\n  height: 6%;\n  width: 55%;\n  margin: 0 Auto;\n  border: 1px solid black;\n}\n\n.hourglass__dome {\n  postition: relative;\n  margin: 0 auto;\n  height: 44%;\n  width: 50%;\n  border: 1px solid black;\n  border-radius: 0 0 50% 50%;\n  overflow: hidden;\n  display: flex;\n  align-items: flex-end;\n  /* background: white; */\n}\n\n.hourglass__dome--top {\n  border-radius: 0 0 50% 50%;\n  z-index: 100;\n  /* background: green; */\n}\n.hourglass__dome--bottom {\n  border-radius: 50% 50% 0 0;\n  z-index: 1000;\n  /* background: red; */\n}\n\n.hourglass__sand {\n  width: 100%;\n  background: black;\n}\n\n.hourglass__sand--top {\n}\n\n.hourglass__sand--bottom {\n}\n\n@keyframes rotate-forward {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(-180deg);\n  }\n}\n@keyframes rotate-backward {\n  0% {\n    transform: rotate(180deg);\n  }\n\n  100% {\n    transform: rotate(0deg);\n  }\n}\n\n@keyframes adjust-sand {\n  0% {\n    align-self: flex-end;\n  }\n\n  25% {\n    height: 100%;\n  }\n\n  50% {\n    width: 50%;\n  }\n  75% {\n    height: 50%;\n    width: 100%;\n    align-self: flex-start;\n  }\n\n  100% {\n    align-self: flex-start;\n  }\n}\n","",{version:3,sources:["webpack://./themes/styles.css"],names:[],mappings:"AAAA,SAAS;AACT;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;;GAEG;;AAEH;EACE,UAAU;EACV,UAAU;EACV,cAAc;EACd,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;EACnB,cAAc;EACd,WAAW;EACX,UAAU;EACV,uBAAuB;EACvB,0BAA0B;EAC1B,gBAAgB;EAChB,aAAa;EACb,qBAAqB;EACrB,uBAAuB;AACzB;;AAEA;EACE,0BAA0B;EAC1B,YAAY;EACZ,uBAAuB;AACzB;AACA;EACE,0BAA0B;EAC1B,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;AACA;;AAEA;AACA;;AAEA;EACE;IACE,uBAAuB;EACzB;;EAEA;IACE,0BAA0B;EAC5B;AACF;AACA;EACE;IACE,yBAAyB;EAC3B;;EAEA;IACE,uBAAuB;EACzB;AACF;;AAEA;EACE;IACE,oBAAoB;EACtB;;EAEA;IACE,YAAY;EACd;;EAEA;IACE,UAAU;EACZ;EACA;IACE,WAAW;IACX,WAAW;IACX,sBAAsB;EACxB;;EAEA;IACE,sBAAsB;EACxB;AACF",sourcesContent:["/* TEMP */\r\nbody {\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.hourglass__container {\r\n  height: 30rem;\r\n  width: 30rem;\r\n  /* border: 1px solid black; */\r\n  postition: relative;\r\n}\r\n\r\n/* #hourglass {\r\n  transform: rotate(10deg);\r\n} */\r\n\r\n.hourglass__rim {\r\n  height: 6%;\r\n  width: 55%;\r\n  margin: 0 Auto;\r\n  border: 1px solid black;\r\n}\r\n\r\n.hourglass__dome {\r\n  postition: relative;\r\n  margin: 0 auto;\r\n  height: 44%;\r\n  width: 50%;\r\n  border: 1px solid black;\r\n  border-radius: 0 0 50% 50%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  /* background: white; */\r\n}\r\n\r\n.hourglass__dome--top {\r\n  border-radius: 0 0 50% 50%;\r\n  z-index: 100;\r\n  /* background: green; */\r\n}\r\n.hourglass__dome--bottom {\r\n  border-radius: 50% 50% 0 0;\r\n  z-index: 1000;\r\n  /* background: red; */\r\n}\r\n\r\n.hourglass__sand {\r\n  width: 100%;\r\n  background: black;\r\n}\r\n\r\n.hourglass__sand--top {\r\n}\r\n\r\n.hourglass__sand--bottom {\r\n}\r\n\r\n@keyframes rotate-forward {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(-180deg);\r\n  }\r\n}\r\n@keyframes rotate-backward {\r\n  0% {\r\n    transform: rotate(180deg);\r\n  }\r\n\r\n  100% {\r\n    transform: rotate(0deg);\r\n  }\r\n}\r\n\r\n@keyframes adjust-sand {\r\n  0% {\r\n    align-self: flex-end;\r\n  }\r\n\r\n  25% {\r\n    height: 100%;\r\n  }\r\n\r\n  50% {\r\n    width: 50%;\r\n  }\r\n  75% {\r\n    height: 50%;\r\n    width: 100%;\r\n    align-self: flex-start;\r\n  }\r\n\r\n  100% {\r\n    align-self: flex-start;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const A=s},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var t="",e=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),e&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=n(r),e&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(n,t,e,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(e)for(var A=0;A<this.length;A++){var d=this[A][0];null!=d&&(s[d]=!0)}for(var l=0;l<n.length;l++){var i=[].concat(n[l]);e&&s[i[0]]||(void 0!==a&&(void 0===i[5]||(i[1]="@layer".concat(i[5].length>0?" ".concat(i[5]):""," {").concat(i[1],"}")),i[5]=a),t&&(i[2]?(i[1]="@media ".concat(i[2]," {").concat(i[1],"}"),i[2]=t):i[2]=t),o&&(i[4]?(i[1]="@supports (".concat(i[4],") {").concat(i[1],"}"),i[4]=o):i[4]="".concat(o)),r.push(i))}},r}},537:n=>{n.exports=function(n){var r=n[1],t=n[3];if(!t)return r;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),a="/*# ".concat(o," */");return[r].concat([a]).join("\n")}return[r].join("\n")}}},r={};function t(e){var o=r[e];if(void 0!==o)return o.exports;var a=r[e]={id:e,exports:{}};return n[e](a,a.exports,t),a.exports}t.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return t.d(r,{a:r}),r},t.d=(n,r)=>{for(var e in r)t.o(r,e)&&!t.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},t.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var e={};return(()=>{t.r(e),t.d(e,{default:()=>o});var n=t(931);const r=n=>{const r=n.getElementById("hourglassSandTop"),t=n.getElementById("hourglassSandBottom"),e=n.getElementById("hourglass");let o,a,s=0,A=100,d=100-A,l=!1;const i=()=>{t.style.height=100-A+"%",r.style.height=`${A}%`,r.style.width="100%",t.style.width="100%"};i();const c=()=>{Date.now();let n=Date.now();o=setInterval((()=>{var r;r=Date.now()-n,s=r/1e3,A-=s/10*100,d=100-A,i(),n=Date.now(),A<=0&&clearInterval(o)}),10)};c(),e.addEventListener("click",(()=>{l||(clearInterval(o),(()=>{const n=Date.now();clearInterval(a),l=!0,a=setInterval((()=>{const o=(Date.now()-n)/700*100,s=-1.8*o;let h;e.style.transform=`rotate(${s>180?180:s}deg)`,h=o<50?o/50:1-(o-50)/50,r.style.height=`${Math.floor(A+(A>=2?100-A:0)*h)}%`,r.style.width=`${Math.floor(A+(A>=2?100-A:0)*(1-h))}%`,t.style.height=`${Math.floor(100-A+(100-A>=2?A:0)*h)}%`,t.style.width=`${Math.floor(100-A+(100-A>=2?A:0)*(1-h))}%`,o>=50&&(r.style.alignSelf="flex-start",t.style.alignSelf="flex-start"),o>=99&&(e.style.transform="rotate(0)",r.style.alignSelf="flex-end",t.style.alignSelf="flex-end",clearInterval(a),A=d,d=100-A,i(),l=!1,c())}),1)})())}))},o=()=>{class t extends HTMLElement{constructor(){super();const r=document.createElement("template");r.innerHTML='<div class="hourglass__container" id="hourglass"> <div class="hourglass__rim"></div> <div class="hourglass__dome hourglass__dome--top"> <div class="hourglass__sand hourglass__sand--top" id="hourglassSandTop"></div> </div> <div class="hourglass__dome hourglass__dome--bottom"> <div class="hourglass__sand hourglass__sand--bottom" id="hourglassSandBottom"></div> </div> <div class="hourglass__rim"></div> </div> ';let t=r.content;this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(t);const e=document.createElement("style");e.textContent=n.Z,this.shadowRoot.appendChild(e)}connectedCallback(){this.javascript(this.shadowRoot)}}t.prototype.core=r,customElements.define("an-hourglass",t)}})(),e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,